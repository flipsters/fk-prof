syntax = "proto2";
option java_package = "fk.prof.aggregation.proto";
option java_outer_classname = "AggregatedProfileModel";

message TraceCtxNames {
	repeated string name = 1;
}

// Additional properties computed for the context
message TraceCtxDetail {
	required uint32 traceIdx = 1;
	optional uint32 sampleCount = 2;
}

// List of all trace contexts. 
message TraceCtxDetailList {
	repeated TraceCtxDetail traceCtx = 1;
}

message RecorderInfo {
	optional string ip = 1;
	optional string hostname = 2;
	optional string appId = 3;
	optional string instanceGroup = 4;
	optional string cluster = 5;
	optional string instanceId = 6;
	optional string processName = 7;
	optional string vmId = 8;
	optional string zone = 9;
	optional string instanceType = 10;
}

// Status at the end of the aggregation window.
enum AggregationStatus {
	Completed = 0;	
	Retried = 1;		// may have duplicated samples because of retries 
	Aborted = 2; 		// may not have all samples because recorder sent them too late.
	Scheduled = 3;   	// no samples
	Partial = 4;     	// in case of the connection errors
}

message RecorderList {
	repeated RecorderInfo recorders = 1;
}

message ProfileWorkInfo {	
	required uint32 startOffset = 1;				// offset in seconds from the current header.aggregationStartTime
	required uint32 duration = 2;
	optional uint32 recorderVersion = 3;
	optional uint32 recorderIdx = 7; 				// idx to recorderList
	repeated SampleCount sampleCount = 4;
	optional AggregationStatus status = 5;
	repeated TraceCtxToCoveragePctMap traceCoverageMap = 6;

	message TraceCtxToCoveragePctMap {
		required uint32 traceCtxIdx = 1;
		required float coveragePct = 2;
	}

	message SampleCount {
		optional WorkType workType = 1;
		required uint32 sampleCount = 2;
	}
}

message MethodLookUp {
	repeated string fqdn = 1;
}

// Represents the node of the stackTrace tree. Each node has methodId, line no.
// childCount and the associated data.
message FrameNode {
	required uint32 methodId = 1;
	required uint32 childCount = 2;
	optional uint32 lineNo = 3;
	optional CPUSamplingNodeProps cpuSamplingProps = 4;	
}

// StacktraceTree is traversed in dfs manner and serialized to a set of FrameNodeList
message FrameNodeList {
	required uint32 traceCtxIdx = 1;
	repeated FrameNode frameNodes = 2;
}

message CPUSamplingNodeProps {
	optional uint32 onCpuSamples = 1;
	optional uint32 onStackSamples = 2;
}

enum WorkType {
	cpu_sample_work = 0;
	thread_sample_work = 1;
	monitor_contention_work = 2;
	monitor_wait_work = 3;
}

message Header {
	required uint32 formatVersion = 1;
	optional string appId = 2;
	optional string clusterId = 3;
	optional string procId = 4;
	optional string aggregationStartTime = 5;				// iso8601 string
	optional string aggregationEndTime = 6;					// iso8601 string
	optional WorkType workType = 7;
}
