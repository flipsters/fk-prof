package recording;

message RecorderInfo {
  required string ip = 1;
  required string hostname = 2;
  required string app_id = 3;
  required string instance_grp = 4;
  required string cluster = 5;
  required string instance_id = 6;
  required string proc_name = 7;
  required string vm_id = 8;
  required string zone = 9;
  required string instance_type = 10;
  required string local_time = 11;
  required uint32 recorder_version = 12;
  required uint32 recorder_uptime = 13;
}

message AssignedBackend {
  required string host = 1;
  required uint32 port = 2;
}

message PollReq {
  required RecorderInfo recorder_info = 1;
  required WorkResponse work_last_issued = 2;
}

message PollRes {
  required string local_time = 1;
  optional WorkAssignment assignment = 2;
  required uint32 controller_id = 4;
  required uint32 controller_version = 5;
}

message WorkResponse {
  required uint64 work_id = 1;
  enum WorkState {
    pre_start = 0;
    running = 1;
    complete = 2;
  }
  required WorkState work_state = 2;
  enum WorkResult {
    unknown = 0;
    success = 1;
    failure = 2;
  }
  required WorkResult work_result = 3;
  required uint32 elapsed_time = 5;
}

message WorkAssignment {
  required uint64 work_id = 1;
  repeated Work work = 2;
  required string description = 3;
  required string issue_time = 4; //controller local time
  required uint32 duration = 5; //seconds, how long to collect data
  required uint32 delay = 6; //seconds, how long to wait before start
}

enum WorkType {
  cpu_sample_work = 0;
  thread_sample_work = 1;
  monitor_contention_work = 2;
  monitor_wait_work = 3;
}

message Work {
  required WorkType w_type = 1;
  optional CpuSampleWork cpu_sample = 2;
  optional ThreadSampleWork thd_sample = 3;
  optional MonitorContentionWork monitor_block = 4;
  optional MonitorWaitWork monitor_wait = 5;
}

message RecordingHeader {
  required uint32 recorder_version = 1;
  required uint32 controller_version = 2;
  required uint32 controller_id = 3;
  required WorkAssignment work_assignment = 4;
}

/* entry */
message Wse {
  optional IndexedData indexed_data = 1;
  required WorkType w_type = 2;
  optional StackSampleWse cpu_sample_entry = 3;
  optional StackSampleWse thread_sample_entry = 4;
  optional MonitorReportWse monitor_contention_entry = 5;
  optional MonitorReportWse monitor_wait_entry = 6;
}

/* indexed data, incrementally sent  */
message IndexedData {
  repeated TraceContext trace_ctx = 1;
  repeated MethodInfo method_info = 2;
  repeated ThreadInfo thread_info = 3;
  repeated MonitorInfo monitor_info = 4;
}

message TraceContext {
  required uint32 trace_id = 1;
  required string trace_name = 2;
  required bool is_generated = 3;
  optional uint32 coverage_pct = 4;
  enum MergeSemantics {
    parent = 0;
    scoped = 1;
    scoped_strict = 2;
    stack = 3;
    duplicate = 4;
  }
  optional MergeSemantics merge = 5;
}

message MethodInfo {
  required int64 method_id = 1;
  required string file_name = 2;
  required string class_fqdn = 3;
  required string method_name = 4;
  required string signature = 5;
}

message ThreadInfo {
  required int64 thread_id = 1;
  required string thread_name = 2;
  required int32 priority = 3;
  required bool is_daemon = 4;
  required int64 tid = 5;
}

message MonitorInfo {
  required uint64 obj_id = 1;
  required string obj_str = 2;
}

/* core work data */

message CpuSampleWork {
  required uint32 frequency = 1;
  required uint32 max_frames = 2;
}

message ThreadSampleWork {
  required uint32 frequency = 1;
  required uint32 max_frames = 2;
}

message StackSampleWse {
  repeated StackSample stack_sample = 1;
}

message StackSample {
  required uint32 start_offset_micros = 1;
  optional int64 thread_id = 2;
  repeated Frame frame = 3;
  repeated uint32 trace_id = 4;
  required bool snipped = 5;
  enum Error {
    ticks_no_Java_frame         = 0;
    ticks_no_class_load         = 1;
    ticks_GC_active             = 2;
    ticks_unknown_not_Java      = 3;
    ticks_not_walkable_not_Java = 4;
    ticks_unknown_Java          = 5;
    ticks_not_walkable_Java     = 6;
    ticks_unknown_state         = 7;
    ticks_thread_exit           = 8;
    ticks_deopt                 = 9;
    ticks_safepoint             = 10;
  }
  optional Error error = 6;
}

message Frame {
  required int64 method_id = 1;
  required int32 bci = 2;
  required int32 line_no = 3;
}

message MonitorContentionWork {
  required uint32 max_monitors = 1;
  required uint32 max_frames = 2;
}

message MonitorWaitWork {
  required uint32 max_monitors = 1;
  required uint32 max_frames = 2;
}

message MonitorReportWse {
  repeated MonitorTrace sample = 1;
}

message MonitorTrace {
  required StackSample stack = 1;
  required uint64 obj_id = 2;
  required uint64 delay_ns = 3;
}

message ProcessGroup {
  required string app_id = 1;
  required string cluster = 2;
  required string proc_name = 3;
}

message ProcessGroups {
  repeated ProcessGroup processGroup = 1;
}